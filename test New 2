import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.util.Optional;
import java.util.Collections;
import java.util.List;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ProcessDateValidatorServiceTest {

    @Mock
    private DataFeedResultRepository dataFeedResultRepository;

    @Mock
    private ValidationControlRepository validationControlRepository;

    @Mock
    private ValidationControlDataFeedRepository validationControlDataFeedRepository;

    @Mock
    private StageRepository stageRepository;

    @Mock
    private HolidayCalendarService holidayCalendarService;

    @InjectMocks
    private ProcessDateValidatorService processDateValidatorService;

    private Workflow workflow;
    private DataFeedResult dataFeedResult;
    private ValidationControlDataFeed validationControlDataFeed;
    private ValidationControl validationControl;
    
    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        workflow = new Workflow();
        workflow.setReferenceNameId("workflowId");

        dataFeedResult = new DataFeedResult();
        dataFeedResult.setProcessDate(java.sql.Date.valueOf(LocalDate.now()));

        validationControlDataFeed = new ValidationControlDataFeed();
        validationControlDataFeed.setValidationMetaData("{\"daysOfWeek\": [1, 2, 3, 4, 5]}"); // Allow Mon-Fri
        validationControlDataFeed.setActive(true);

        validationControl = new ValidationControl();
        validationControl.setValidationControlId(1L);
    }

    @Test
    void testValidate_ProcessDateMatches() {
        // Mocking
        when(dataFeedResultRepository.findByReferenceNameId(anyString())).thenReturn(Optional.of(dataFeedResult));
        when(validationControlRepository.findByControlNameAndIsActiveAndStageId(anyString(), anyBoolean(), anyLong()))
                .thenReturn(Collections.singletonList(validationControl));
        when(validationControlDataFeedRepository.findByValidationControl_ValidationControlId(anyLong()))
                .thenReturn(Collections.singletonList(validationControlDataFeed));

        // Test
        processDateValidatorService.validate(validationControlDataFeed, workflow);

        // Verify no exceptions are thrown
        verify(dataFeedResultRepository, times(1)).findByReferenceNameId("workflowId");
    }

    @Test
    void testValidate_ProcessDateDoesNotMatch() {
        // Simulate Process Date not matching Current Date
        dataFeedResult.setProcessDate(java.sql.Date.valueOf(LocalDate.now().minusDays(1)));

        // Mocking
        when(dataFeedResultRepository.findByReferenceNameId(anyString())).thenReturn(Optional.of(dataFeedResult));
        when(validationControlRepository.findByControlNameAndIsActiveAndStageId(anyString(), anyBoolean(), anyLong()))
                .thenReturn(Collections.singletonList(validationControl));
        when(validationControlDataFeedRepository.findByValidationControl_ValidationControlId(anyLong()))
                .thenReturn(Collections.singletonList(validationControlDataFeed));

        // Test
        processDateValidatorService.validate(validationControlDataFeed, workflow);

        // Verify validation failure case is handled
        verify(dataFeedResultRepository, times(1)).findByReferenceNameId("workflowId");
        verify(validationControlDataFeedRepository, times(1)).findByValidationControl_ValidationControlId(anyLong());
    }

    @Test
    void testAdjustDateForWeekend_Saturday() {
        // Prepare a Saturday date
        LocalDate saturday = LocalDate.of(2024, 9, 7); // This is a Saturday

        // Test
        LocalDate adjustedDate = processDateValidatorService.adjustDateForWeekendAndHolidays(saturday);

        // Assert that the date has been moved to the next Monday
        assertEquals(DayOfWeek.MONDAY, adjustedDate.getDayOfWeek());
        assertEquals(LocalDate.of(2024, 9, 9), adjustedDate); // Expected Monday
    }

    @Test
    void testAdjustDateForWeekend_Sunday() {
        // Prepare a Sunday date
        LocalDate sunday = LocalDate.of(2024, 9, 8); // This is a Sunday

        // Test
        LocalDate adjustedDate = processDateValidatorService.adjustDateForWeekendAndHolidays(sunday);

        // Assert that the date has been moved to the next Monday
        assertEquals(DayOfWeek.MONDAY, adjustedDate.getDayOfWeek());
        assertEquals(LocalDate.of(2024, 9, 9), adjustedDate); // Expected Monday
    }

    @Test
    void testAdjustDateForHoliday() {
        // Prepare a regular weekday that is a holiday
        LocalDate holiday = LocalDate.of(2024, 9, 4); // Let's assume this is a holiday

        // Mocking
        when(holidayCalendarService.getBusinessDate(any(LocalDate.class))).thenReturn(LocalDate.of(2024, 9, 5));

        // Test
        LocalDate adjustedDate = processDateValidatorService.adjustDateForWeekendAndHolidays(holiday);

        // Assert that the date has been moved based on the business calendar
        assertEquals(LocalDate.of(2024, 9, 5), adjustedDate); // Expected business date
    }

    @Test
    void testValidateControlNotFound() {
        // Mocking
        when(dataFeedResultRepository.findByReferenceNameId(anyString())).thenReturn(Optional.of(dataFeedResult));
        when(validationControlRepository.findByControlNameAndIsActiveAndStageId(anyString(), anyBoolean(), anyLong()))
                .thenReturn(Collections.emptyList());

        // Test & Assert
        Exception exception = assertThrows(ValidateControlException.class, () -> {
            processDateValidatorService.validate(validationControlDataFeed, workflow);
        });

        assertEquals("ValidationControl not found", exception.getMessage());
    }

    @Test
    void testParseAllowedDays() {
        // Test parsing allowed days
        Set<Integer> allowedDays = processDateValidatorService.parseAllowedDays("{\"daysOfWeek\": [1, 2, 3]}");

        // Assert correct parsing
        assertTrue(allowedDays.contains(1));
        assertTrue(allowedDays.contains(2));
        assertTrue(allowedDays.contains(3));
        assertFalse(allowedDays.contains(7)); // Sunday not included
    }

    @Test
    void testDataFeedResultNotFound() {
        // Mocking
        when(dataFeedResultRepository.findByReferenceNameId(anyString())).thenReturn(Optional.empty());

        // Test & Assert
        Exception exception = assertThrows(ValidateControlException.class, () -> {
            processDateValidatorService.validate(validationControlDataFeed, workflow);
        });

        assertEquals("DataFeedResult not found for workflow: workflowId", exception.getMessage());
    }
}
