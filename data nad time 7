public void isProcessDateValida(Workflow workflow) {
    try {
        // Step 1: Retrieve Data from ValidationControl Table
        Optional<DataFeedResult> dataResult = dataFeedResultRepository.findByReferenceNameId(workflow.getReferenceNameId());
        ValidationControl validationControl = validationControlRepository
                .findByControlNameAndIsActiveAndStageId(
                        "ProcessDate",
                        true,
                        stageRepository.getStageByCodeNameAndIsActive(Constants.STAGE2_CODE_NAME, Boolean.TRUE).getStageId()
                ).stream().findFirst().orElse(new ValidationControl());

        // Step 2: Retrieve Data from ValidationControlDataFeed Table
        List<ValidationControlDataFeed> validationControlDataFeeds = validationControlDataFeedRepository.findByValidationControlId(validationControl.getValidationControlId());
        Boolean resultPassed = false; // Initialize resultPassed to false

        // Step 3: Validate DataFeed and Retrieve validationMetaData
        for (ValidationControlDataFeed dataFeed : validationControlDataFeeds) {
            if (dataFeed.isActive() && dataFeed.getValidationControls().getValidationControlId() == validationControl.getValidationControlId()) {
                String validationMetaData = dataFeed.getValidationMetaData();

                // Step 4: Calculate Based on validationMetaData and processDate
                if (isWithinAllowedRange(dataResult.get().getProcessDate(), validationMetaData)) {
                    resultPassed = true;  // Set resultPassed to true only when validation passes

                    int dayOfWeek = dataResult.get().getProcessDate().getDayOfWeek().getValue();
                    Long validationControlDataFeedResultId = saveValidationControlDataFeedResult(
                            dataResult.get().getDataFeedResultId(), resultPassed, LocalDateTime.now(),
                            String.valueOf(dayOfWeek), validationMetaData, dataFeed.getValidationControlDataFeedId()
                    );
                    log.info("Process date is within allowed range based on validation meta-data.");
                } else {
                    // Set resultPassed to false if validation fails
                    resultPassed = false;
                    log.warn("Process date does not fall within the allowed time and day range.");

                    // Save exception result including process date and validation meta-data
                    saveValidationControlDataFeedResultException(
                        dataResult.get().getDataFeedResultId(), 
                        LocalDateTime.now(), 
                        "Process Date Validation Failed", 
                        "Process Date: " + dataResult.get().getProcessDate() + ", Validation MetaData: " + validationMetaData,
                        "Validation Process",
                        "HIGH"
                    );
                }
            }
        }

        // Additional processing or updating the workflow status based on the validation result
        if (!resultPassed) {
            updateWorkflowStatus(workflow, Constants.STAGE2_CODE_NAME, Constants.WORKFLOW_EXCEPTION);
        }

    } catch (Exception e) {
        log.error("Error processing validation: ", e);
        updateWorkflowStatus(workflow, Constants.STAGE2_CODE_NAME, Constants.WORKFLOW_EXCEPTION);
    }
}
