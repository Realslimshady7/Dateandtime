public void isProcessDateValid(Workflow workflow) {
    try {
        // Fetch the DataFeedResult by reference name
        Optional<DataFeedResult> dataResultOpt = dataFeedResultRepository.findByReferenceNameId(workflow.getReferenceNameId());
        if (!dataResultOpt.isPresent()) {
            throw new ValidateControlException("DataFeedResult not found for workflow: " + workflow.getReferenceNameId());
        }
        
        DataFeedResult dataResult = dataResultOpt.get();

        // Fetch the ValidationControl for "ProcessDate"
        ValidationControl validationControl = validationControlRepository
            .findByControlNameAndIsActiveAndStageId(
                "ProcessDate", 
                true, 
                stageRepository.getStageByCodeNameAndIsActive(Constants.STAGE2_CODE_NAME, true).getStageId()
            )
            .stream().findFirst().orElse(new ValidationControl());

        // Fetch the list of ValidationControlDataFeeds
        List<ValidationControlDataFeed> validationControlDataFeeds = validationControlDataFeedRepository
            .findByValidationControl_ValidationControlId(validationControl.getValidationControlId());

        boolean isProcessDateValid = validationControlDataFeeds.stream()
            .filter(ValidationControlDataFeed::isActive)
            .anyMatch(dataFeed -> {
                String validationMetaData = dataFeed.getValidationMetaData();
                
                // Check if process date falls within the allowed range
                boolean isWithinRange = isWithinAllowedRange(dataResult.getProcessDate(), validationMetaData);

                if (isWithinRange) {
                    // Compare the process date with the current date
                    if (dataResult.getProcessDate().equals(LocalDate.now())) {
                        // Save the validation result when dates match
                        saveValidationControlDataFeedResult(
                            dataResult.getDataFeedResultId(), 
                            true, 
                            LocalDateTime.now(), 
                            LocalDate.now().toString(), 
                            dataResult.getProcessDate().toString(), 
                            dataFeed.getValidationControlDataFeedId()
                        );
                        log.info("Process date is within allowed range and matches the current day.");
                        return true;
                    } else {
                        // Save the validation result when dates do not match
                        saveValidationControlDataFeedResult(
                            dataResult.getDataFeedResultId(), 
                            false, 
                            LocalDateTime.now(), 
                            LocalDate.now().toString(), 
                            dataResult.getProcessDate().toString(), 
                            dataFeed.getValidationControlDataFeedId()
                        );
                        // Save the exception record when dates do not match
                        saveValidationControlDataFeedResultException(
                            dataResult.getDataFeedResultId(),
                            LocalDateTime.now(),
                            "Process date does not match the current date", 
                            dataResult.getProcessDate().toString(),
                            validationMetaData,
                            "ProcessDate",
                            "HIGH"
                        );
                        log.warn("Process date does not match the current day.");
                    }
                } else {
                    log.warn("Process date does not fall within the allowed range.");
                }

                return false;
            });

        // If validation failed, update the workflow status
        if (!isProcessDateValid) {
            updateWorkflowStatus(workflow, Constants.STAGE2_CODE_NAME, Constants.WORKFLOW_EXCEPTION);
        }
    } catch (Exception e) {
        log.error("Error processing validation: ", e);
        // Save the exception for any unexpected errors
        saveValidationControlDataFeedResultException(
            null, // Null because we may not have the dataFeedResultId in case of an unexpected error
            LocalDateTime.now(),
            e.getMessage(),
            LocalDate.now().toString(),
            null, 
            "ProcessDate",
            "CRITICAL"
        );
        updateWorkflowStatus(workflow, Constants.STAGE2_CODE_NAME, Constants.WORKFLOW_EXCEPTION);
    }
}

private void saveValidationControlDataFeedResult(Long dataFeedResultId, boolean validationResult, 
                                                 LocalDateTime timestamp, String currentDate, 
                                                 String processDate, Long validationControlDataFeedId) {
    try {
        ValidationControlDataFeedResult validationControlDataFeedResult = new ValidationControlDataFeedResult();
        validationControlDataFeedResult.setDataFeedResultId(dataFeedResultId);  
        validationControlDataFeedResult.setResultPassed(validationResult);  
        validationControlDataFeedResult.setTimestamp(timestamp);
        validationControlDataFeedResult.setProcessDate(processDate);
        validationControlDataFeedResult.setValidationMetaData(currentDate);
        validationControlDataFeedResult.setValidationControlDataFeedId(validationControlDataFeedId);

        // Save the validation result
        validationControlDataFeedResultRepository.save(validationControlDataFeedResult);

    } catch (Exception e) {
        log.error("Error saving validation result for DataFeedResultId: {}", dataFeedResultId, e);
    }
}

private void saveValidationControlDataFeedResultException(Long dataFeedResultId, LocalDateTime timestamp, 
                                                          String exceptionMessage, String processDate, 
                                                          String validationMetaData, String processName, 
                                                          String severityLevel) {
    try {
        ValidationControlDataFeedResultException exception = new ValidationControlDataFeedResultException();
        exception.setExceptionDate(timestamp);
        exception.setExceptionMessage(exceptionMessage);
        exception.setExceptionSeverity(severityLevel);
        exception.setExceptionSource(processName);
        exception.setExceptionType("Validation");
        exception.setValidationControlDataFeedResultId(dataFeedResultId); // Make sure this ID exists in the result table

        // Save the exception record
        validationControlDataFeedResultExceptionRepository.save(exception);
        log.info("Validation exception saved successfully for DataFeedResultId: {}", dataFeedResultId);

    } catch (Exception e) {
        log.error("Error saving validation exception for DataFeedResultId: {}", dataFeedResultId, e);
    }
}